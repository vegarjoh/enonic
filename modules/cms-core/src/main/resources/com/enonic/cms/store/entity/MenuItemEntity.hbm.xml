<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.enonic.cms.core.structure.menuitem" default-access="field">
  <class name="com.enonic.cms.core.structure.menuitem.MenuItemEntity" table="TMENUITEM" mutable="true" batch-size="500">
    <cache usage="nonstrict-read-write"/>
    <id name="key" type="com.enonic.cms.store.hibernate.type.MenuItemKeyUserType">
      <column name="MEI_LKEY"/>
      <generator class="assigned"/>
    </id>
    <property name="description" type="string">
      <column name="MEI_SDESCRIPTION" length="1024"/>
    </property>
    <property name="hidden" type="boolean">
      <column name="MEI_BHIDDEN"/>
    </property>
    <property name="keywords" type="string">
      <column name="MEI_SKEYWORDS" length="1024"/>
    </property>
    <property name="name" type="string">
      <column name="MEI_SNAME" length="255" not-null="true"/>
    </property>
    <property name="noAuth" type="boolean">
      <column name="MEI_BNOAUTH"/>
    </property>
    <property name="order" type="int">
      <column name="MEI_LORDER" not-null="true"/>
    </property>
    <property name="menuName" type="string">
      <column name="MEI_SSUBTITLE" length="256"/>
    </property>
    <property name="timestamp" type="timestamp">
      <column name="MEI_DTETIMESTAMP" not-null="true"/>
    </property>
    <property name="xmlData" type="com.enonic.cms.store.hibernate.type.LazyInitializedJDOMDocumentUserType">
      <column name="MEI_XMLDATA"/>
    </property>
    <property name="menuItemType" type="com.enonic.cms.store.hibernate.type.MenuItemTypeUserType">
      <column name="MEI_MID_LKEY" not-null="true"/>
    </property>
    <many-to-one name="language" class="com.enonic.cms.core.language.LanguageEntity" fetch="select">
      <column name="MEI_LAN_LKEY"/>
    </many-to-one>
    <many-to-one name="modifier" class="com.enonic.cms.core.security.user.UserEntity" fetch="select">
      <column name="MEI_USR_HMODIFIER" length="40"/>
    </many-to-one>
    <many-to-one name="owner" class="com.enonic.cms.core.security.user.UserEntity" fetch="select">
      <column name="MEI_USR_HOWNER" length="40"/>
    </many-to-one>
    <many-to-one name="page" class="com.enonic.cms.core.structure.page.PageEntity" fetch="select">
      <column name="MEI_PAG_LKEY"/>
    </many-to-one>
    <many-to-one name="parent" class="com.enonic.cms.core.structure.menuitem.MenuItemEntity" fetch="select">
      <column name="MEI_LPARENT"/>
    </many-to-one>
    <many-to-one name="site" class="com.enonic.cms.core.structure.SiteEntity" fetch="select">
      <column name="MEI_MEN_LKEY" not-null="true"/>
    </many-to-one>
    <property name="url" type="string">
      <column name="MEI_SURL" length="255"/>
    </property>
    <property name="openNewWindowForURL" type="boolean">
      <column name="MEI_BURLOPENNEWWIN"/>
    </property>
    <many-to-one name="menuItemShortcut" class="com.enonic.cms.core.structure.menuitem.MenuItemEntity" fetch="select">
      <column name="MEI_MEI_LSHORTCUT"/>
    </many-to-one>
    <property name="shortcutForward" type="boolean">
      <column name="MEI_BSHORTCUTFORWARD"/>
    </property>
    <property name="section" type="boolean">
      <column name="mei_bsection"/>
    </property>
    <property name="orderedSection" type="boolean">
      <column name="MEI_BORDEREDSECTION"/>
    </property>
    <property name="runAs" type="com.enonic.cms.store.hibernate.type.RunAsUserType">
      <column name="MEI_LRUNAS" not-null="false"/>
    </property>
    <property name="displayName" type="string">
      <column name="MEI_SDISPLAYNAME" length="256" not-null="true"/>
    </property>
    <map name="childrenMapByName" order-by="MEI_LORDER asc" inverse="true" lazy="true" fetch="select" batch-size="500">
      <cache usage="nonstrict-read-write"/>
      <key column="MEI_LPARENT"/>
      <map-key type="com.enonic.cms.store.hibernate.type.CaseInsensitiveStringUserType" column="MEI_SNAME"/>
      <one-to-many class="com.enonic.cms.core.structure.menuitem.MenuItemEntity"/>
    </map>
    <set name="contents" inverse="false" table="TMENUITEMCONTENT" lazy="true" fetch="select" batch-size="500">
      <cache usage="nonstrict-read-write"/>
      <key>
        <column name="MIC_MEI_LKEY" not-null="true"/>
      </key>
      <many-to-many class="com.enonic.cms.core.content.ContentEntity">
        <column name="MIC_CON_LKEY" not-null="true"/>
      </many-to-many>
    </set>
    <set name="sectionContents" inverse="true" sort="com.enonic.cms.core.structure.menuitem.SectionContentComparatorByOrder" lazy="true" fetch="select" batch-size="500">
      <cache usage="nonstrict-read-write"/>
      <key column="SCO_MEI_LKEY" not-null="true"/>
      <one-to-many class="com.enonic.cms.core.structure.menuitem.section.SectionContentEntity"/>
    </set>
    <set name="sectionContentTypeFilters" inverse="true" lazy="true" fetch="select" batch-size="500" cascade="all-delete-orphan">
      <cache usage="nonstrict-read-write"/>
      <key column="SCTF_MEI_LKEY" not-null="true"/>
      <one-to-many class="com.enonic.cms.core.structure.menuitem.section.SectionContentTypeFilterEntity"/>
    </set>
    <map name="accesses" lazy="true" fetch="select" batch-size="500" inverse="true">
      <cache usage="nonstrict-read-write"/>
      <key column="MIA_MEI_LKEY"/>
      <map-key type="com.enonic.cms.store.hibernate.type.GroupKeyUserType" column="MIA_GRP_HKEY"/>
      <one-to-many class="com.enonic.cms.core.structure.menuitem.MenuItemAccessEntity"/>
    </map>
  </class>

  <query name="MenuItemEntity.findAll" cacheable="true">
    from MenuItemEntity
  </query>
  <query name="MenuItemEntity.findBySiteKey" cacheable="true">
    from MenuItemEntity x where x.site.key = :siteKey order by x.parent.key asc, x.order asc
  </query>
  <query name="MenuItemEntity.findTopMenuItems" cacheable="true">
    from MenuItemEntity x where x.site.key = :siteKey and x.parent is null order by x.order asc
  </query>
  <query name="MenuItemEntity.findContentPage" cacheable="true">
    select x from MenuItemEntity x left join x.contents as y where x.site.key = :siteKey and y.key = :contentKey
  </query>
  <query name="MenuItemEntity.findByPageTemplate" cacheable="true">
    from MenuItemEntity where page.template.key = :pageTemplateKey
  </query>
</hibernate-mapping>
